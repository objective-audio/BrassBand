// This test file was generated by AI.

import Testing

@testable import BrassBand

@MainActor
struct RectPlaneDataTests {
    @Test func initWithRectCount() {
        let data = RectPlaneData(rectCount: 2)

        #expect(data.rectCount == 2)
        #expect(data.maxRectCount == 2)

        data.vertexData.read { vertices in
            vertices.withMemoryRebound(to: Vertex2dRect.self) { rects in
                #expect(rects.count == 2)  // 2 rects
            }
        }

        data.indexData.read { indices in
            indices.withMemoryRebound(to: Index2dRect.self) { rects in
                #expect(rects.count == 2)  // 2 rects
            }
        }
    }

    @Test func setRectPosition() {
        let data = RectPlaneData(rectCount: 1)
        let region = Region(center: .zero, size: .init(width: 100, height: 100))

        data.setRectPosition(region, rectIndex: 0)

        data.vertexData.read { vertices in
            vertices.withMemoryRebound(to: Vertex2dRect.self) { rects in
                let positions = RegionPositions(region)
                #expect(rects[0].vertices.0.position == positions[0])
                #expect(rects[0].vertices.1.position == positions[1])
                #expect(rects[0].vertices.2.position == positions[2])
                #expect(rects[0].vertices.3.position == positions[3])
            }
        }
    }

    @Test func setRectColor() {
        let data = RectPlaneData(rectCount: 1)
        let color = Color(rgb: .red, alpha: .one)

        data.setRectColor(color, rectIndex: 0)

        data.vertexData.read { vertices in
            vertices.withMemoryRebound(to: Vertex2dRect.self) { rects in
                #expect(rects[0].vertices.0.color == color.simd4)
                #expect(rects[0].vertices.1.color == color.simd4)
                #expect(rects[0].vertices.2.color == color.simd4)
                #expect(rects[0].vertices.3.color == color.simd4)
            }
        }
    }

    @Test func setRectTexcoords() {
        let data = RectPlaneData(rectCount: 1)
        let texcoords = UIntRegion(origin: .zero, size: .init(width: 100, height: 100))

        data.setRectTexcoords(texcoords, rectIndex: 0)

        data.vertexData.read { vertices in
            vertices.withMemoryRebound(to: Vertex2dRect.self) { rects in
                let positions = RegionPositions(texcoords)
                #expect(rects[0].vertices.0.texCoord == positions[0])
                #expect(rects[0].vertices.1.texCoord == positions[1])
                #expect(rects[0].vertices.2.texCoord == positions[2])
                #expect(rects[0].vertices.3.texCoord == positions[3])
            }
        }
    }

    @Test func setRectIndices() {
        let data = RectPlaneData(rectCount: 2)
        let indexPairs = [(indexIndex: 0, vertexIndex: 1)]

        data.setRectIndices(indexPairs)

        data.indexData.read { indices in
            indices.withMemoryRebound(to: Index2dRect.self) { rects in
                #expect(rects[0].indices.0 == 4)  // vertexIndex * 4
                #expect(rects[0].indices.1 == 6)
                #expect(rects[0].indices.2 == 5)
                #expect(rects[0].indices.3 == 5)
                #expect(rects[0].indices.4 == 6)
                #expect(rects[0].indices.5 == 7)
            }
        }
    }

    @Test func setRect() {
        let data = RectPlaneData(rectCount: 1)
        let region = Region(center: .zero, size: .init(width: 100, height: 100))
        let color = Color(rgb: .red, alpha: .one)
        let texcoords = UIntRegion(origin: .zero, size: .init(width: 100, height: 100))

        var rect = Vertex2dRect()
        rect.setPositions(RegionPositions(region))
        rect.setColors(color)
        rect.setTexCoords(RegionPositions(texcoords))

        data.setRect(rect, rectIndex: 0)

        data.vertexData.read { vertices in
            vertices.withMemoryRebound(to: Vertex2dRect.self) { rects in
                let positions = RegionPositions(region)
                let texPositions = RegionPositions(texcoords)

                // 位置の確認
                #expect(rects[0].vertices.0.position == positions[0])
                #expect(rects[0].vertices.1.position == positions[1])
                #expect(rects[0].vertices.2.position == positions[2])
                #expect(rects[0].vertices.3.position == positions[3])

                // 色の確認
                #expect(rects[0].vertices.0.color == color.simd4)
                #expect(rects[0].vertices.1.color == color.simd4)
                #expect(rects[0].vertices.2.color == color.simd4)
                #expect(rects[0].vertices.3.color == color.simd4)

                // テクスチャ座標の確認
                #expect(rects[0].vertices.0.texCoord == texPositions[0])
                #expect(rects[0].vertices.1.texCoord == texPositions[1])
                #expect(rects[0].vertices.2.texCoord == texPositions[2])
                #expect(rects[0].vertices.3.texCoord == texPositions[3])
            }
        }
    }

    @Test func rectCount() {
        let data = RectPlaneData(rectCount: 2)

        #expect(data.rectCount == 2)

        data.rectCount = 1
        #expect(data.rectCount == 1)

        data.rectCount = 0
        #expect(data.rectCount == 0)
    }

    @Test func bindRectTexcoords() {
        let data = RectPlaneData(rectCount: 1)
        let texcoords = UIntRegion(origin: .zero, size: .init(width: 100, height: 100))

        data.setRectTexcoords(texcoords, rectIndex: 0)

        // 直接セットしたテクスチャ座標が正しく設定されているか確認
        data.vertexData.read { vertices in
            vertices.withMemoryRebound(to: Vertex2dRect.self) { rects in
                let positions = RegionPositions(texcoords)
                #expect(rects[0].vertices.0.texCoord == positions[0])
                #expect(rects[0].vertices.1.texCoord == positions[1])
                #expect(rects[0].vertices.2.texCoord == positions[2])
                #expect(rects[0].vertices.3.texCoord == positions[3])
            }
        }

        // Textureを生成
        let scaleFactorProvider = ScaleFactorProviderStub()
        let texture = Texture(
            pointSize: .init(width: 100, height: 100),
            scaleFactorProvider: scaleFactorProvider
        )

        // TextureElementをTextureのaddElementで生成
        let element = texture.addElement(size: .init(width: 100, height: 100)) { _ in }

        // RectPlaneDataにTextureElementをバインド
        let cancellable = data.bindRectTexcoords(element: element, rectIndex: 0)

        // TextureElementにtexcoordsをセット
        element.texCoords = UIntRegion(
            origin: UIntPoint(x: 10, y: 10), size: UIntSize(width: 80, height: 80))

        // バインドされたテクスチャ座標が正しく設定されているか確認
        data.vertexData.read { vertices in
            vertices.withMemoryRebound(to: Vertex2dRect.self) { rects in
                let positions = RegionPositions(
                    UIntRegion(
                        origin: UIntPoint(x: 10, y: 10), size: UIntSize(width: 80, height: 80)))
                #expect(rects[0].vertices.0.texCoord == positions[0])
                #expect(rects[0].vertices.1.texCoord == positions[1])
                #expect(rects[0].vertices.2.texCoord == positions[2])
                #expect(rects[0].vertices.3.texCoord == positions[3])
            }
        }

        cancellable.cancel()
    }

    @Test func bindRectTexcoordsWithTransform() {
        let data = RectPlaneData(rectCount: 1)
        let texcoords = UIntRegion(origin: .zero, size: .init(width: 100, height: 100))

        data.setRectTexcoords(texcoords, rectIndex: 0)

        // Textureを生成
        let scaleFactorProvider = ScaleFactorProviderStub()
        let texture = Texture(
            pointSize: .init(width: 100, height: 100),
            scaleFactorProvider: scaleFactorProvider
        )

        // TextureElementをTextureのaddElementで生成
        let element = texture.addElement(size: .init(width: 100, height: 100)) { _ in }

        // RectPlaneDataにTextureElementをバインド（transform付き）
        let cancellable = data.bindRectTexcoords(
            element: element,
            rectIndex: 0
        ) { region in
            // テクスチャ座標を拡大する変換
            UIntRegion(
                origin: UIntPoint(x: region.origin.x + 10, y: region.origin.y + 10),
                size: UIntSize(
                    width: region.size.width + 20,
                    height: region.size.height + 20
                )
            )
        }

        // TextureElementにtexcoordsをセット
        element.texCoords = UIntRegion(
            origin: UIntPoint(x: 20, y: 20),
            size: UIntSize(width: 60, height: 60)
        )

        // 変換されたテクスチャ座標が正しく設定されているか確認
        data.vertexData.read { vertices in
            vertices.withMemoryRebound(to: Vertex2dRect.self) { rects in
                let positions = RegionPositions(
                    UIntRegion(
                        origin: UIntPoint(x: 30, y: 30),
                        size: UIntSize(width: 80, height: 80)
                    )
                )
                #expect(rects[0].vertices.0.texCoord == positions[0])
                #expect(rects[0].vertices.1.texCoord == positions[1])
                #expect(rects[0].vertices.2.texCoord == positions[2])
                #expect(rects[0].vertices.3.texCoord == positions[3])
            }
        }

        cancellable.cancel()
    }
}
